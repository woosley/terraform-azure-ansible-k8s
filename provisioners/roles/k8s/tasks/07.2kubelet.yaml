- name: create kubelet bootstrap 
  shell: >
      BOOTSTRAP_TOKEN=$(/opt/k8s/bin/kubeadm token create --description kubelet-bootstrap-token --groups system:bootstrappers:$(hostname) --kubeconfig /root/.kube/config) \
      && kubectl config set-cluster kubernetes  --certificate-authority=/etc/kubernetes/cert/ca.pem  --embed-certs=true  --server={{KUBE_APISERVER}}  --kubeconfig=/etc/kubernetes/kubelet-bootstrap.kubeconfig \ 
      && kubectl config set-credentials kubelet-bootstrap  --token=${BOOTSTRAP_TOKEN} --kubeconfig=/etc/kubernetes/kubelet-bootstrap.kubeconfig \
      && kubectl config set-context default --cluster=kubernetes --user=kubelet-bootstrap --kubeconfig=/etc/kubernetes/kubelet-bootstrap.kubeconfig \ 
      && kubectl config use-context default --kubeconfig=/etc/kubernetes/kubelet-bootstrap.kubeconfig
  args:
    creates: /etc/kubernetes/kubelet-bootstrap.kubeconfig

- name: setup kubelet configuration file
  template:
    src: kubelet-config.yaml.j2
    dest: /etc/kubernetes/kubelet-config.yaml

- name: setup folder
  file:
      state: directory
      path: "{{ item }}"
  with_items:
      - /data/k8s/k8s/kubelet/kubelet-plugins/volume/exec/

- name: setup kubelet systemd service file
  template: 
    src: kubelet.service.j2
    dest: /etc/systemd/system/kubelet.service

- name: setup boostrap auth token permission
  run_once: true
  shell: kubectl create clusterrolebinding kubelet-bootstrap --clusterrole=system:node-bootstrapper --group=system:bootstrappers
  ignore_errors: yes 

- name: enabled and start kubelet
  systemd:
      name: kubelet
      enabled: yes
      state: started
      daemon_reload: yes

- name: create csr.yaml
  delegate_to: "{{groups['all'][0]}}"
  run_once: true
  copy:
      src: csr-crb.yaml
      dest: "{{K8S_DIR}}/csr-crb.yaml"

- name: create approval rules
  delegate_to: "{{groups['all'][0]}}"
  run_once: true
  shell: kubectl apply -f {{K8S_DIR}}/csr-crb.yaml && touch {{K8S_DIR}}/csr-crb-applied
  args:
    creates: "{{K8S_DIR}}/csr-crb-applied"

# approve csr kubectl get csr | grep Pending | awk '{print $1}' | xargs kubectl  certificate approve
# kubectl create clusterrolebinding kube-apiserver:kubelet-apis --clusterrole=system:kubelet-api-admin --user kubernetes
