- name: setup kubenetes key 
  delegate_to: localhost
  run_once: true
  copy: 
    src: kube-proxy-csr.json
    dest: /tmp/provisioners/kube-proxy-csr.json

- name: create certifiates for kube-proxy
  delegate_to: localhost
  run_once: true
  shell: cfssl gencert -ca=./ca.pem -ca-key=./ca-key.pem -config=./ca-config.json -profile=kubernetes  kube-proxy-csr.json | cfssljson -bare kube-proxy
  args:
      creates: kube-proxy-key.pem

- name: setup kubeconfig for kube proxy 
  delegate_to: localhost
  run_once: true
  shell: >
    kubectl config set-cluster kubernetes  --certificate-authority=./ca.pem  --embed-certs=true --server={{KUBE_APISERVER}} --kubeconfig=kube-proxy.kubeconfig \ 
    && kubectl config set-credentials kube-proxy  --client-certificate=kube-proxy.pem  --client-key=kube-proxy-key.pem  --embed-certs=true  --kubeconfig=kube-proxy.kubeconfig \
    && kubectl config set-context default  --cluster=kubernetes  --user=kube-proxy  --kubeconfig=kube-proxy.kubeconfig \ 
    && kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig
  args: 
    creates: kube-proxy.kubeconfig

- name: distribute kube-proxy.kubeconfig
  copy:
      src: kube-proxy.kubeconfig
      dest: /etc/kubernetes/kube-proxy.kubeconfig

- name: setup kube proxy configuration file
  template:
      src: kube-proxy-config.yaml.j2
      dest: /etc/kube-proxy-config.yaml

- name: setup kube-proxy systemd file
  template:
      src: kube-proxy.service.j2
      dest: /etc/systemd/system/kube-proxy.sevice

- name: enabled and start kube-proxy
  systemd:
      name: kube-proxy
      enabled: yes
      state: started
      daemon_reload: yes
