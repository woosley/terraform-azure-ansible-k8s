- name: setup csr file
  delegate_to: localhost
  run_once: true
  template:
      src: kubernetes-csr.json.j2
      dest: /tmp/provisioners/kubernetes-csr.json

- name: create certs for apiserver
  delegate_to: localhost
  run_once: true
  shell: cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kubernetes-csr.json | cfssljson -bare kubernetes
  args:
      creates: kubernetes-key.pem

- name: setup csr for metrics server
  run_once: true
  delegate_to: localhost
  template: 
    src: proxy-client-csr.json.j2
    dest: /tmp/provisioners/proxy-client-csr.json

- name: create certs for apiserver
  delegate_to: localhost
  run_once: true
  shell: cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes proxy-client-csr.json | cfssljson -bare proxy-client
  args:
      creates: proxy-client-key.pem

- name: copy certs to server
  copy:
      src: "{{ item }}"
      dest: /etc/kubernetes/cert/{{item}}
  with_items:
      - kubernetes.pem
      - kubernetes-key.pem
      - proxy-client.pem
      - proxy-client-key.pem

- name: copy configuration files to server
  template:
      src: "{{ item }}.j2"
      dest: /etc/kubernetes/{{item}}
  with_items:
      - audit-policy.yaml
      - encryption-config.yaml

- name: setup apiserver systemd service file
  template: 
    src: kube-apiserver.service.j2
    dest: /etc/systemd/system/kube-apiserver.service

- name: create apiserver directory
  file:
    path: {{ K8S_DIR}}/apiserver
    state: directory

- name: enabled and start apiserver
  systemd:
      name: kube-apiserver
      enabled: yes
      state: started
      daemon_reload: yes
